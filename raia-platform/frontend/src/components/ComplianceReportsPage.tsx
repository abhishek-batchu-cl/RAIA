import React, { useState, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Shield,
  FileText,
  Download,
  Calendar,
  Clock,
  CheckCircle,
  AlertTriangle,
  XCircle,
  Filter,
  Search,
  Eye,
  RefreshCw,
  BarChart3,
  PieChart,
  TrendingUp,
  Globe,
  Lock,
  Users,
  Settings,
  Zap
} from 'lucide-react';
import { cn } from '../utils';

interface ComplianceFramework {
  id: string;
  name: string;
  shortName: string;
  description: string;
  region: string;
  status: 'compliant' | 'non-compliant' | 'partially-compliant' | 'in-progress';
  lastAudit: string;
  nextAudit: string;
  score: number;
  requirements: {
    id: string;
    name: string;
    status: 'met' | 'not-met' | 'partial' | 'in-progress';
    description: string;
    evidence?: string[];
    lastChecked: string;
  }[];
  riskLevel: 'low' | 'medium' | 'high' | 'critical';
  autoGenerated: boolean;
}

interface ComplianceReport {
  id: string;
  title: string;
  framework: string;
  type: 'audit' | 'assessment' | 'certification' | 'monitoring';
  status: 'draft' | 'pending' | 'approved' | 'rejected';
  createdAt: string;
  createdBy: string;
  lastModified: string;
  size: string;
  downloadUrl?: string;
  summary: {
    totalRequirements: number;
    metRequirements: number;
    pendingRequirements: number;
    riskScore: number;
  };
}

const mockFrameworks: ComplianceFramework[] = [
  {
    id: 'gdpr',
    name: 'General Data Protection Regulation',
    shortName: 'GDPR',
    description: 'EU regulation on data protection and privacy',
    region: 'European Union',
    status: 'compliant',
    lastAudit: '2024-01-15',
    nextAudit: '2024-07-15',
    score: 94,
    riskLevel: 'low',
    autoGenerated: true,
    requirements: [
      {
        id: 'gdpr-art-13',
        name: 'Right to Explanation',
        status: 'met',
        description: 'Automated individual decision explanations available',
        evidence: ['Explanation API logs', 'User interface screenshots'],
        lastChecked: '2024-01-15'
      },
      {
        id: 'gdpr-art-5',
        name: 'Data Minimization',
        status: 'met',
        description: 'Only necessary data used for ML models',
        evidence: ['Data inventory', 'Privacy impact assessment'],
        lastChecked: '2024-01-15'
      }
    ]
  },
  {
    id: 'eu-ai-act',
    name: 'European Union AI Act',
    shortName: 'EU AI Act',
    description: 'EU regulation on artificial intelligence',
    region: 'European Union',
    status: 'partially-compliant',
    lastAudit: '2024-01-10',
    nextAudit: '2024-04-10',
    score: 78,
    riskLevel: 'medium',
    autoGenerated: true,
    requirements: [
      {
        id: 'ai-act-art-10',
        name: 'Risk Assessment',
        status: 'met',
        description: 'High-risk AI system classification completed',
        evidence: ['Risk assessment document'],
        lastChecked: '2024-01-10'
      },
      {
        id: 'ai-act-art-13',
        name: 'Transparency Requirements',
        status: 'partial',
        description: 'Some transparency obligations need completion',
        evidence: ['Model cards', 'Documentation'],
        lastChecked: '2024-01-10'
      }
    ]
  },
  {
    id: 'soc2',
    name: 'SOC 2 Type II',
    shortName: 'SOC 2',
    description: 'Service Organization Control 2 audit framework',
    region: 'United States',
    status: 'compliant',
    lastAudit: '2023-12-01',
    nextAudit: '2024-12-01',
    score: 96,
    riskLevel: 'low',
    autoGenerated: false,
    requirements: [
      {
        id: 'soc2-security',
        name: 'Security Controls',
        status: 'met',
        description: 'All security controls implemented and tested',
        evidence: ['Penetration test results', 'Security audit logs'],
        lastChecked: '2023-12-01'
      }
    ]
  },
  {
    id: 'fcra',
    name: 'Fair Credit Reporting Act',
    shortName: 'FCRA',
    description: 'US federal law regulating credit reporting',
    region: 'United States',
    status: 'in-progress',
    lastAudit: '2024-01-20',
    nextAudit: '2024-04-20',
    score: 65,
    riskLevel: 'high',
    autoGenerated: true,
    requirements: [
      {
        id: 'fcra-adverse',
        name: 'Adverse Action Notices',
        status: 'in-progress',
        description: 'Automated adverse action notice generation',
        evidence: ['Template documentation'],
        lastChecked: '2024-01-20'
      }
    ]
  }
];

const mockReports: ComplianceReport[] = [
  {
    id: 'rep-001',
    title: 'GDPR Compliance Audit Report Q1 2024',
    framework: 'GDPR',
    type: 'audit',
    status: 'approved',
    createdAt: '2024-01-15',
    createdBy: 'System Admin',
    lastModified: '2024-01-16',
    size: '2.4 MB',
    downloadUrl: '#',
    summary: {
      totalRequirements: 25,
      metRequirements: 24,
      pendingRequirements: 1,
      riskScore: 94
    }
  },
  {
    id: 'rep-002',
    title: 'EU AI Act Readiness Assessment',
    framework: 'EU AI Act',
    type: 'assessment',
    status: 'pending',
    createdAt: '2024-01-10',
    createdBy: 'Compliance Team',
    lastModified: '2024-01-12',
    size: '1.8 MB',
    summary: {
      totalRequirements: 18,
      metRequirements: 14,
      pendingRequirements: 4,
      riskScore: 78
    }
  },
  {
    id: 'rep-003',
    title: 'SOC 2 Annual Certification',
    framework: 'SOC 2',
    type: 'certification',
    status: 'approved',
    createdAt: '2023-12-01',
    createdBy: 'External Auditor',
    lastModified: '2023-12-15',
    size: '5.2 MB',
    downloadUrl: '#',
    summary: {
      totalRequirements: 32,
      metRequirements: 31,
      pendingRequirements: 1,
      riskScore: 96
    }
  }
];

const ComplianceReportsPage: React.FC = () => {
  const [selectedFramework, setSelectedFramework] = useState<ComplianceFramework | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [regionFilter, setRegionFilter] = useState<string>('all');
  const [activeTab, setActiveTab] = useState<'overview' | 'frameworks' | 'reports' | 'monitoring'>('overview');
  const [isGeneratingReport, setIsGeneratingReport] = useState(false);

  // Filter frameworks based on search and filters
  const filteredFrameworks = useMemo(() => {
    return mockFrameworks.filter(framework => {
      const matchesSearch = framework.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           framework.shortName.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesStatus = statusFilter === 'all' || framework.status === statusFilter;
      const matchesRegion = regionFilter === 'all' || framework.region === regionFilter;
      
      return matchesSearch && matchesStatus && matchesRegion;
    });
  }, [searchTerm, statusFilter, regionFilter]);

  // Calculate compliance statistics
  const complianceStats = useMemo(() => {
    const total = mockFrameworks.length;
    const compliant = mockFrameworks.filter(f => f.status === 'compliant').length;
    const partiallyCompliant = mockFrameworks.filter(f => f.status === 'partially-compliant').length;
    const nonCompliant = mockFrameworks.filter(f => f.status === 'non-compliant').length;
    const inProgress = mockFrameworks.filter(f => f.status === 'in-progress').length;
    
    const avgScore = mockFrameworks.reduce((sum, f) => sum + f.score, 0) / total;
    const criticalRisks = mockFrameworks.filter(f => f.riskLevel === 'critical').length;
    const highRisks = mockFrameworks.filter(f => f.riskLevel === 'high').length;
    
    return {
      total,
      compliant,
      partiallyCompliant,
      nonCompliant,
      inProgress,
      avgScore,
      criticalRisks,
      highRisks
    };
  }, []);

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'compliant':
      case 'approved':
      case 'met':
        return <CheckCircle className="w-5 h-5 text-green-500" />;
      case 'partially-compliant':
      case 'pending':
      case 'partial':
        return <AlertTriangle className="w-5 h-5 text-yellow-500" />;
      case 'non-compliant':
      case 'rejected':
      case 'not-met':
        return <XCircle className="w-5 h-5 text-red-500" />;
      case 'in-progress':
      case 'draft':
        return <Clock className="w-5 h-5 text-blue-500" />;
      default:
        return <Clock className="w-5 h-5 text-gray-500" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'compliant':
      case 'approved':
      case 'met':
        return 'text-green-600 bg-green-50 dark:bg-green-900/20 dark:text-green-400';
      case 'partially-compliant':
      case 'pending':
      case 'partial':
        return 'text-yellow-600 bg-yellow-50 dark:bg-yellow-900/20 dark:text-yellow-400';
      case 'non-compliant':
      case 'rejected':
      case 'not-met':
        return 'text-red-600 bg-red-50 dark:bg-red-900/20 dark:text-red-400';
      case 'in-progress':
      case 'draft':
        return 'text-blue-600 bg-blue-50 dark:bg-blue-900/20 dark:text-blue-400';
      default:
        return 'text-gray-600 bg-gray-50 dark:bg-gray-900/20 dark:text-gray-400';
    }
  };

  const generateReport = async (frameworkId: string) => {
    setIsGeneratingReport(true);
    // Simulate report generation
    await new Promise(resolve => setTimeout(resolve, 3000));
    setIsGeneratingReport(false);
  };

  const renderOverviewTab = () => (
    <div className="space-y-6">
      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-gradient-to-r from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 rounded-lg p-6">
          <div className="flex items-center justify-between">
            <div>
              <div className="text-sm font-medium text-green-600 dark:text-green-400 uppercase tracking-wider">
                Compliance Rate
              </div>
              <div className="text-3xl font-bold text-green-900 dark:text-green-100 mt-2">
                {((complianceStats.compliant / complianceStats.total) * 100).toFixed(0)}%
              </div>
              <div className="text-sm text-green-700 dark:text-green-300 mt-1">
                {complianceStats.compliant} of {complianceStats.total} frameworks
              </div>
            </div>
            <Shield className="w-12 h-12 text-green-500" />
          </div>
        </div>

        <div className="bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 rounded-lg p-6">
          <div className="flex items-center justify-between">
            <div>
              <div className="text-sm font-medium text-blue-600 dark:text-blue-400 uppercase tracking-wider">
                Avg Score
              </div>
              <div className="text-3xl font-bold text-blue-900 dark:text-blue-100 mt-2">
                {complianceStats.avgScore.toFixed(0)}
              </div>
              <div className="text-sm text-blue-700 dark:text-blue-300 mt-1">
                Out of 100 points
              </div>
            </div>
            <BarChart3 className="w-12 h-12 text-blue-500" />
          </div>
        </div>

        <div className="bg-gradient-to-r from-yellow-50 to-yellow-100 dark:from-yellow-900/20 dark:to-yellow-800/20 rounded-lg p-6">
          <div className="flex items-center justify-between">
            <div>
              <div className="text-sm font-medium text-yellow-600 dark:text-yellow-400 uppercase tracking-wider">
                High Risk
              </div>
              <div className="text-3xl font-bold text-yellow-900 dark:text-yellow-100 mt-2">
                {complianceStats.highRisks + complianceStats.criticalRisks}
              </div>
              <div className="text-sm text-yellow-700 dark:text-yellow-300 mt-1">
                Frameworks requiring attention
              </div>
            </div>
            <AlertTriangle className="w-12 h-12 text-yellow-500" />
          </div>
        </div>

        <div className="bg-gradient-to-r from-purple-50 to-purple-100 dark:from-purple-900/20 dark:to-purple-800/20 rounded-lg p-6">
          <div className="flex items-center justify-between">
            <div>
              <div className="text-sm font-medium text-purple-600 dark:text-purple-400 uppercase tracking-wider">
                Auto Reports
              </div>
              <div className="text-3xl font-bold text-purple-900 dark:text-purple-100 mt-2">
                {mockFrameworks.filter(f => f.autoGenerated).length}
              </div>
              <div className="text-sm text-purple-700 dark:text-purple-300 mt-1">
                Automated compliance tracking
              </div>
            </div>
            <Zap className="w-12 h-12 text-purple-500" />
          </div>
        </div>
      </div>

      {/* Compliance Status Overview */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Framework Status Distribution */}
        <div className="bg-white dark:bg-neutral-800 rounded-lg border border-neutral-200 dark:border-neutral-700 p-6">
          <h4 className="font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
            Framework Status Distribution
          </h4>
          <div className="space-y-3">
            {[
              { status: 'compliant', count: complianceStats.compliant, label: 'Compliant' },
              { status: 'partially-compliant', count: complianceStats.partiallyCompliant, label: 'Partially Compliant' },
              { status: 'in-progress', count: complianceStats.inProgress, label: 'In Progress' },
              { status: 'non-compliant', count: complianceStats.nonCompliant, label: 'Non-Compliant' }
            ].map(({ status, count, label }) => (
              <div key={status} className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  {getStatusIcon(status)}
                  <span className="text-sm font-medium text-neutral-900 dark:text-neutral-100">
                    {label}
                  </span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-sm text-neutral-600 dark:text-neutral-400">
                    {count}
                  </span>
                  <div className="w-24 bg-neutral-200 dark:bg-neutral-700 rounded-full h-2">
                    <div 
                      className={cn(
                        "h-2 rounded-full",
                        status === 'compliant' ? 'bg-green-500' :
                        status === 'partially-compliant' ? 'bg-yellow-500' :
                        status === 'in-progress' ? 'bg-blue-500' :
                        'bg-red-500'
                      )}
                      style={{ width: `${(count / complianceStats.total) * 100}%` }}
                    />
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Recent Activities */}
        <div className="bg-white dark:bg-neutral-800 rounded-lg border border-neutral-200 dark:border-neutral-700 p-6">
          <h4 className="font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
            Recent Compliance Activities
          </h4>
          <div className="space-y-3">
            {[
              {
                action: 'GDPR Audit Completed',
                framework: 'GDPR',
                timestamp: '2 hours ago',
                status: 'success'
              },
              {
                action: 'EU AI Act Assessment Started',
                framework: 'EU AI Act',
                timestamp: '1 day ago',
                status: 'in-progress'
              },
              {
                action: 'SOC 2 Report Generated',
                framework: 'SOC 2',
                timestamp: '3 days ago',
                status: 'success'
              },
              {
                action: 'FCRA Compliance Check Failed',
                framework: 'FCRA',
                timestamp: '1 week ago',
                status: 'warning'
              }
            ].map((activity, index) => (
              <div key={index} className="flex items-center justify-between p-3 bg-neutral-50 dark:bg-neutral-700 rounded-lg">
                <div className="flex items-center gap-3">
                  <div className={cn(
                    "w-2 h-2 rounded-full",
                    activity.status === 'success' ? 'bg-green-500' :
                    activity.status === 'warning' ? 'bg-yellow-500' :
                    'bg-blue-500'
                  )} />
                  <div>
                    <div className="text-sm font-medium text-neutral-900 dark:text-neutral-100">
                      {activity.action}
                    </div>
                    <div className="text-xs text-neutral-600 dark:text-neutral-400">
                      {activity.framework}
                    </div>
                  </div>
                </div>
                <span className="text-xs text-neutral-500 dark:text-neutral-400">
                  {activity.timestamp}
                </span>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );

  const renderFrameworksTab = () => (
    <div className="space-y-6">
      {/* Filters */}
      <div className="bg-white dark:bg-neutral-800 rounded-lg border border-neutral-200 dark:border-neutral-700 p-4">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="relative">
            <Search className="absolute left-3 top-2.5 w-4 h-4 text-neutral-400" />
            <input
              type="text"
              placeholder="Search frameworks..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10 w-full px-3 py-2 text-sm border border-neutral-300 dark:border-neutral-600 rounded-md bg-white dark:bg-neutral-800 text-neutral-900 dark:text-neutral-100"
            />
          </div>

          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className="px-3 py-2 text-sm border border-neutral-300 dark:border-neutral-600 rounded-md bg-white dark:bg-neutral-800 text-neutral-900 dark:text-neutral-100"
          >
            <option value="all">All Statuses</option>
            <option value="compliant">Compliant</option>
            <option value="partially-compliant">Partially Compliant</option>
            <option value="non-compliant">Non-Compliant</option>
            <option value="in-progress">In Progress</option>
          </select>

          <select
            value={regionFilter}
            onChange={(e) => setRegionFilter(e.target.value)}
            className="px-3 py-2 text-sm border border-neutral-300 dark:border-neutral-600 rounded-md bg-white dark:bg-neutral-800 text-neutral-900 dark:text-neutral-100"
          >
            <option value="all">All Regions</option>
            <option value="European Union">European Union</option>
            <option value="United States">United States</option>
            <option value="Global">Global</option>
          </select>

          <button
            onClick={() => generateReport('all')}
            disabled={isGeneratingReport}
            className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isGeneratingReport ? (
              <>
                <RefreshCw className="w-4 h-4 animate-spin" />
                Generating...
              </>
            ) : (
              <>
                <FileText className="w-4 h-4" />
                Generate Report
              </>
            )}
          </button>
        </div>
      </div>

      {/* Frameworks Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {filteredFrameworks.map((framework) => (
          <motion.div
            key={framework.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-white dark:bg-neutral-800 rounded-lg border border-neutral-200 dark:border-neutral-700 p-6 hover:shadow-lg transition-shadow cursor-pointer"
            onClick={() => setSelectedFramework(framework)}
          >
            <div className="flex items-start justify-between mb-4">
              <div className="flex-1">
                <div className="flex items-center gap-2 mb-2">
                  <h3 className="font-semibold text-neutral-900 dark:text-neutral-100">
                    {framework.shortName}
                  </h3>
                  <span className={cn(
                    "px-2 py-1 rounded-full text-xs font-medium",
                    getStatusColor(framework.status)
                  )}>
                    {framework.status.replace('-', ' ')}
                  </span>
                  {framework.autoGenerated && (
                    <span className="px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400">
                      Auto
                    </span>
                  )}
                </div>
                <p className="text-sm text-neutral-600 dark:text-neutral-400 mb-2">
                  {framework.description}
                </p>
                <div className="flex items-center gap-4 text-xs text-neutral-500 dark:text-neutral-400">
                  <div className="flex items-center gap-1">
                    <Globe className="w-3 h-3" />
                    {framework.region}
                  </div>
                  <div className="flex items-center gap-1">
                    <Calendar className="w-3 h-3" />
                    Last audit: {new Date(framework.lastAudit).toLocaleDateString()}
                  </div>
                </div>
              </div>
              
              <div className="text-right">
                <div className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
                  {framework.score}
                </div>
                <div className="text-xs text-neutral-500 dark:text-neutral-400">
                  Score
                </div>
              </div>
            </div>

            {/* Progress Bar */}
            <div className="mb-4">
              <div className="flex justify-between text-xs text-neutral-600 dark:text-neutral-400 mb-1">
                <span>Compliance Score</span>
                <span>{framework.score}%</span>
              </div>
              <div className="w-full bg-neutral-200 dark:bg-neutral-700 rounded-full h-2">
                <div 
                  className={cn(
                    "h-2 rounded-full transition-all duration-500",
                    framework.score >= 90 ? 'bg-green-500' :
                    framework.score >= 70 ? 'bg-yellow-500' :
                    'bg-red-500'
                  )}
                  style={{ width: `${framework.score}%` }}
                />
              </div>
            </div>

            {/* Requirements Summary */}
            <div className="grid grid-cols-3 gap-2 text-center">
              <div className="bg-green-50 dark:bg-green-900/20 rounded p-2">
                <div className="text-lg font-bold text-green-900 dark:text-green-100">
                  {framework.requirements.filter(r => r.status === 'met').length}
                </div>
                <div className="text-xs text-green-600 dark:text-green-400">
                  Met
                </div>
              </div>
              <div className="bg-yellow-50 dark:bg-yellow-900/20 rounded p-2">
                <div className="text-lg font-bold text-yellow-900 dark:text-yellow-100">
                  {framework.requirements.filter(r => r.status === 'partial').length}
                </div>
                <div className="text-xs text-yellow-600 dark:text-yellow-400">
                  Partial
                </div>
              </div>
              <div className="bg-red-50 dark:bg-red-900/20 rounded p-2">
                <div className="text-lg font-bold text-red-900 dark:text-red-100">
                  {framework.requirements.filter(r => r.status === 'not-met').length}
                </div>
                <div className="text-xs text-red-600 dark:text-red-400">
                  Not Met
                </div>
              </div>
            </div>
          </motion.div>
        ))}
      </div>
    </div>
  );

  const renderReportsTab = () => (
    <div className="space-y-6">
      {/* Reports List */}
      <div className="bg-white dark:bg-neutral-800 rounded-lg border border-neutral-200 dark:border-neutral-700">
        <div className="p-6 border-b border-neutral-200 dark:border-neutral-700">
          <div className="flex items-center justify-between">
            <h3 className="font-semibold text-neutral-900 dark:text-neutral-100">
              Compliance Reports
            </h3>
            <button className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
              <FileText className="w-4 h-4" />
              Generate New Report
            </button>
          </div>
        </div>

        <div className="divide-y divide-neutral-200 dark:divide-neutral-700">
          {mockReports.map((report) => (
            <motion.div
              key={report.id}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="p-6 hover:bg-neutral-50 dark:hover:bg-neutral-700/50 transition-colors"
            >
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-2">
                    <h4 className="font-medium text-neutral-900 dark:text-neutral-100">
                      {report.title}
                    </h4>
                    {getStatusIcon(report.status)}
                    <span className={cn(
                      "px-2 py-1 rounded-full text-xs font-medium",
                      getStatusColor(report.status)
                    )}>
                      {report.status}
                    </span>
                    <span className="px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400">
                      {report.type}
                    </span>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4 text-sm text-neutral-600 dark:text-neutral-400">
                    <div>
                      <span className="font-medium">Framework:</span> {report.framework}
                    </div>
                    <div>
                      <span className="font-medium">Created:</span> {new Date(report.createdAt).toLocaleDateString()}
                    </div>
                    <div>
                      <span className="font-medium">Size:</span> {report.size}
                    </div>
                    <div>
                      <span className="font-medium">Created by:</span> {report.createdBy}
                    </div>
                  </div>

                  {/* Report Summary */}
                  <div className="grid grid-cols-4 gap-4 mt-3 text-sm">
                    <div className="bg-neutral-50 dark:bg-neutral-700 rounded p-2 text-center">
                      <div className="font-bold text-neutral-900 dark:text-neutral-100">
                        {report.summary.totalRequirements}
                      </div>
                      <div className="text-xs text-neutral-500 dark:text-neutral-400">
                        Total Req.
                      </div>
                    </div>
                    <div className="bg-green-50 dark:bg-green-900/20 rounded p-2 text-center">
                      <div className="font-bold text-green-900 dark:text-green-100">
                        {report.summary.metRequirements}
                      </div>
                      <div className="text-xs text-green-600 dark:text-green-400">
                        Met
                      </div>
                    </div>
                    <div className="bg-yellow-50 dark:bg-yellow-900/20 rounded p-2 text-center">
                      <div className="font-bold text-yellow-900 dark:text-yellow-100">
                        {report.summary.pendingRequirements}
                      </div>
                      <div className="text-xs text-yellow-600 dark:text-yellow-400">
                        Pending
                      </div>
                    </div>
                    <div className="bg-blue-50 dark:bg-blue-900/20 rounded p-2 text-center">
                      <div className="font-bold text-blue-900 dark:text-blue-100">
                        {report.summary.riskScore}%
                      </div>
                      <div className="text-xs text-blue-600 dark:text-blue-400">
                        Risk Score
                      </div>
                    </div>
                  </div>
                </div>

                <div className="flex items-center gap-2">
                  <button className="p-2 text-neutral-600 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-neutral-100">
                    <Eye className="w-4 h-4" />
                  </button>
                  {report.downloadUrl && (
                    <button className="p-2 text-neutral-600 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-neutral-100">
                      <Download className="w-4 h-4" />
                    </button>
                  )}
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    </div>
  );

  const renderMonitoringTab = () => (
    <div className="space-y-6">
      {/* Real-time Monitoring Dashboard */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 bg-white dark:bg-neutral-800 rounded-lg border border-neutral-200 dark:border-neutral-700 p-6">
          <h4 className="font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
            Compliance Score Trends
          </h4>
          <div className="h-64 flex items-center justify-center text-neutral-500 dark:text-neutral-400">
            <div className="text-center">
              <TrendingUp className="w-12 h-12 mx-auto mb-2" />
              <p>Compliance trend chart would be displayed here</p>
            </div>
          </div>
        </div>

        <div className="space-y-4">
          <div className="bg-white dark:bg-neutral-800 rounded-lg border border-neutral-200 dark:border-neutral-700 p-4">
            <h5 className="font-medium text-neutral-900 dark:text-neutral-100 mb-3">
              Alerts & Notifications
            </h5>
            <div className="space-y-2">
              {[
                {
                  message: 'GDPR compliance score dropped to 89%',
                  time: '2 minutes ago',
                  severity: 'warning'
                },
                {
                  message: 'EU AI Act assessment due in 7 days',
                  time: '1 hour ago',
                  severity: 'info'
                },
                {
                  message: 'SOC 2 audit successfully completed',
                  time: '2 hours ago',
                  severity: 'success'
                }
              ].map((alert, index) => (
                <div key={index} className="flex items-start gap-2 p-2 rounded bg-neutral-50 dark:bg-neutral-700">
                  <div className={cn(
                    "w-2 h-2 rounded-full mt-1.5",
                    alert.severity === 'warning' ? 'bg-yellow-500' :
                    alert.severity === 'success' ? 'bg-green-500' :
                    'bg-blue-500'
                  )} />
                  <div className="flex-1">
                    <p className="text-sm text-neutral-900 dark:text-neutral-100">
                      {alert.message}
                    </p>
                    <p className="text-xs text-neutral-500 dark:text-neutral-400">
                      {alert.time}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="bg-white dark:bg-neutral-800 rounded-lg border border-neutral-200 dark:border-neutral-700 p-4">
            <h5 className="font-medium text-neutral-900 dark:text-neutral-100 mb-3">
              Upcoming Audits
            </h5>
            <div className="space-y-2">
              {mockFrameworks
                .filter(f => new Date(f.nextAudit) <= new Date(Date.now() + 30 * 24 * 60 * 60 * 1000))
                .map((framework) => (
                  <div key={framework.id} className="flex items-center justify-between p-2 rounded bg-neutral-50 dark:bg-neutral-700">
                    <div>
                      <p className="text-sm font-medium text-neutral-900 dark:text-neutral-100">
                        {framework.shortName}
                      </p>
                      <p className="text-xs text-neutral-500 dark:text-neutral-400">
                        {new Date(framework.nextAudit).toLocaleDateString()}
                      </p>
                    </div>
                    <Calendar className="w-4 h-4 text-neutral-400" />
                  </div>
                ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-neutral-50 dark:bg-neutral-900">
      {/* Header */}
      <div className="bg-white dark:bg-neutral-800 border-b border-neutral-200 dark:border-neutral-700">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100 flex items-center gap-3">
                <Shield className="w-8 h-8 text-blue-500" />
                Compliance & Regulatory Reports
              </h1>
              <p className="text-sm text-neutral-600 dark:text-neutral-400 mt-1">
                Enterprise-grade compliance monitoring and automated regulatory reporting
              </p>
            </div>
            
            <div className="flex items-center gap-3">
              <span className="text-sm text-neutral-600 dark:text-neutral-400">
                Last updated: {new Date().toLocaleString()}
              </span>
              <button className="p-2 text-neutral-600 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-neutral-100">
                <RefreshCw className="w-4 h-4" />
              </button>
            </div>
          </div>

          {/* Tab Navigation */}
          <div className="flex gap-1 mt-6">
            {[
              { key: 'overview', label: 'Overview', icon: BarChart3 },
              { key: 'frameworks', label: 'Frameworks', icon: Shield },
              { key: 'reports', label: 'Reports', icon: FileText },
              { key: 'monitoring', label: 'Monitoring', icon: TrendingUp }
            ].map(({ key, label, icon: Icon }) => (
              <button
                key={key}
                onClick={() => setActiveTab(key as any)}
                className={cn(
                  'flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-medium transition-all',
                  activeTab === key
                    ? 'bg-blue-500 text-white shadow-lg'
                    : 'bg-neutral-100 dark:bg-neutral-700 text-neutral-700 dark:text-neutral-300 hover:bg-neutral-200 dark:hover:bg-neutral-600'
                )}
              >
                <Icon className="w-4 h-4" />
                {label}
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <AnimatePresence mode="wait">
          {activeTab === 'overview' && (
            <motion.div
              key="overview"
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: 20 }}
            >
              {renderOverviewTab()}
            </motion.div>
          )}
          
          {activeTab === 'frameworks' && (
            <motion.div
              key="frameworks"
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: 20 }}
            >
              {renderFrameworksTab()}
            </motion.div>
          )}
          
          {activeTab === 'reports' && (
            <motion.div
              key="reports"
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: 20 }}
            >
              {renderReportsTab()}
            </motion.div>
          )}
          
          {activeTab === 'monitoring' && (
            <motion.div
              key="monitoring"
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: 20 }}
            >
              {renderMonitoringTab()}
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      {/* Framework Details Modal */}
      <AnimatePresence>
        {selectedFramework && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
            onClick={() => setSelectedFramework(null)}
          >
            <motion.div
              initial={{ scale: 0.95, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.95, opacity: 0 }}
              className="bg-white dark:bg-neutral-800 rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="p-6 border-b border-neutral-200 dark:border-neutral-700">
                <div className="flex items-center justify-between">
                  <div>
                    <h2 className="text-xl font-bold text-neutral-900 dark:text-neutral-100">
                      {selectedFramework.name}
                    </h2>
                    <p className="text-sm text-neutral-600 dark:text-neutral-400 mt-1">
                      {selectedFramework.description}
                    </p>
                  </div>
                  <button
                    onClick={() => setSelectedFramework(null)}
                    className="text-neutral-500 hover:text-neutral-700 dark:hover:text-neutral-300"
                  >
                    ×
                  </button>
                </div>
              </div>

              <div className="p-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h3 className="font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                      Framework Details
                    </h3>
                    <div className="space-y-3 text-sm">
                      <div className="flex justify-between">
                        <span className="text-neutral-600 dark:text-neutral-400">Region:</span>
                        <span className="text-neutral-900 dark:text-neutral-100">{selectedFramework.region}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-neutral-600 dark:text-neutral-400">Status:</span>
                        <span className={cn("capitalize", getStatusColor(selectedFramework.status))}>
                          {selectedFramework.status.replace('-', ' ')}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-neutral-600 dark:text-neutral-400">Score:</span>
                        <span className="text-neutral-900 dark:text-neutral-100">{selectedFramework.score}/100</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-neutral-600 dark:text-neutral-400">Risk Level:</span>
                        <span className={cn(
                          "capitalize",
                          selectedFramework.riskLevel === 'critical' ? 'text-red-600' :
                          selectedFramework.riskLevel === 'high' ? 'text-orange-600' :
                          selectedFramework.riskLevel === 'medium' ? 'text-yellow-600' :
                          'text-green-600'
                        )}>
                          {selectedFramework.riskLevel}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-neutral-600 dark:text-neutral-400">Last Audit:</span>
                        <span className="text-neutral-900 dark:text-neutral-100">
                          {new Date(selectedFramework.lastAudit).toLocaleDateString()}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-neutral-600 dark:text-neutral-400">Next Audit:</span>
                        <span className="text-neutral-900 dark:text-neutral-100">
                          {new Date(selectedFramework.nextAudit).toLocaleDateString()}
                        </span>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h3 className="font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                      Requirements ({selectedFramework.requirements.length})
                    </h3>
                    <div className="space-y-3 max-h-64 overflow-y-auto">
                      {selectedFramework.requirements.map((req) => (
                        <div key={req.id} className="p-3 bg-neutral-50 dark:bg-neutral-700 rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <span className="font-medium text-neutral-900 dark:text-neutral-100 text-sm">
                              {req.name}
                            </span>
                            {getStatusIcon(req.status)}
                          </div>
                          <p className="text-xs text-neutral-600 dark:text-neutral-400 mb-2">
                            {req.description}
                          </p>
                          <div className="text-xs text-neutral-500 dark:text-neutral-400">
                            Last checked: {new Date(req.lastChecked).toLocaleDateString()}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                <div className="flex justify-end gap-3 mt-6 pt-6 border-t border-neutral-200 dark:border-neutral-700">
                  <button
                    onClick={() => generateReport(selectedFramework.id)}
                    className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                  >
                    <FileText className="w-4 h-4" />
                    Generate Report
                  </button>
                  <button
                    onClick={() => setSelectedFramework(null)}
                    className="px-4 py-2 bg-neutral-200 dark:bg-neutral-700 text-neutral-700 dark:text-neutral-300 rounded-md hover:bg-neutral-300 dark:hover:bg-neutral-600"
                  >
                    Close
                  </button>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default ComplianceReportsPage;