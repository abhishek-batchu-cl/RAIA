version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: raia-postgres
    environment:
      POSTGRES_DB: raia_platform
      POSTGRES_USER: raia_user
      POSTGRES_PASSWORD: raia_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U raia_user -d raia_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - raia-network

  redis:
    image: redis:7-alpine
    container_name: raia-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - raia-network

  # Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: raia-chromadb
    ports:
      - "8001:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    networks:
      - raia-network

  # Time Series Database
  influxdb:
    image: influxdb:2.7-alpine
    container_name: raia-influxdb
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: adminpassword
      DOCKER_INFLUXDB_INIT_ORG: raia
      DOCKER_INFLUXDB_INIT_BUCKET: metrics
    networks:
      - raia-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: raia-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://raia_user:raia_password@postgres:5432/raia_platform
      - REDIS_URL=redis://redis:6379
      - CHROMADB_URL=http://chromadb:8000
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=your-influxdb-token
      - INFLUXDB_ORG=raia
      - INFLUXDB_BUCKET=metrics
      - JWT_SECRET_KEY=your-secret-key-change-in-production
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app
      - ./data/documents:/app/data/documents
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - raia-network

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: raia-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - raia-network

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: raia-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - raia-network

  grafana:
    image: grafana/grafana:latest
    container_name: raia-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - raia-network

  # Message Queue
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: raia-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - raia-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: raia-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - raia-network

  # Worker for Background Tasks
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: raia-worker
    environment:
      - DATABASE_URL=postgresql://raia_user:raia_password@postgres:5432/raia_platform
      - REDIS_URL=redis://redis:6379
      - CHROMADB_URL=http://chromadb:8000
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    volumes:
      - ./backend:/app
      - ./data/documents:/app/data/documents
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - raia-network

volumes:
  postgres_data:
  redis_data:
  chromadb_data:
  influxdb_data:
  prometheus_data:
  grafana_data:

networks:
  raia-network:
    driver: bridge